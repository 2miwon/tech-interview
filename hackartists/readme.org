#+title: Docker
#+author: Hackartist
#+startup: logdone
#+startup: inlineimages
#+Property: header-args :eval never-export
#+hugo_auto_set_lastmod: t

* 개요
** DONE 기본 개념                                                      :DONE:
   CLOSED: [2021-02-14 Sun 19:21]
   + 각 애플리케이션마다 격리된 환경으로 관리
    + 서로 다른 애플리에키션간의 영향도를 최소화
     + 하나의 컴퓨터 운영체제(Host OS)에 격리된 운영체제(Guest OS)를 생성
   + 호스트 운영체제의 커널 공유를 통해 자원을 활용적으로 사용하기 위해 커널을 공유하여, CPU, RAM 등의 하드웨어 자원 공유

#+begin_src ditaa :file images/docker-basic-concept.png :exports results :cmdline -r -s 0.8
  +---------------------------------+ +-------------------------------+
  |           Container             | |            Container 2        |
  |   +-------------------------+   | |   +-----------------------+   |
  |   |        Application 1    |   | |   |       Application 2   |   |
  |   |                         |   | |   |                       |   |
  |   +-------------------------+   | |   +-----------------------+   |
  |                                 | |                               |
  |   +-------------------------+   | |   +-----------------------+   |
  |   |        Libraries        |   | |   |        Libraries      |   |
  |   |                         |   | |   |                       |   |
  |   +-------------------------+   | |   +-----------------------+   |
  +---------------------------------+ +-------------------------------+

  +-------------------------------------------------------------------+
  |                                                                   |
  |                                                                   |
  |                             Docker Engine                         |
  |                                                                   |
  |                                                                   |
  +-------------------------------------------------------------------+

  +-------------------------------------------------------------------+
  |                                                                   |
  |                                                                   |
  |                        Host Operating System                      |
  |                                                                   |
  |                                                                   |
  +-------------------------------------------------------------------+

#+end_src

#+RESULTS:
[[file:images/docker-basic-concept.png]]



** 도커 설치
   https://docs.docker.com/get-docker/ 를 참고하여 다양한 운영체제에서 설치할 수 있음. 
   - Mac OS
   - Windows
   - Linux
*** Arch Linux 에서 도커 설치
    + =yay=, =pacman= 등을 이용하여 설치 할 수 있음.
 #+BEGIN_SRC bash
   pacman -S docker
 #+END_SRC

** 도커 실행
*** 도커 디먼 실행
    + =systemctl= 명령어를 사용하여 도커 디먼을 실행

#+BEGIN_SRC bash
systemctl start docker
#+END_SRC

*** 도커 디먼 실행 확인
    + =systemctl= 를 이용하여 도커 디먼 실행 여부를 확인할 수 있음.
      + =systemctl= 에서 상태(status)가 =active= 로 나오면, 정상적으로 실행됨.

#+BEGIN_SRC bash
systemctl status docker
#+END_SRC

#+BEGIN_SRC 
...
Active: active (running) ...
...
#+END_SRC

*** 도커 명령어
  + =docker= 명령어를 실행하여, 하위 명령어 리스트 보기.
    + 반드시 도커 디먼이 실행되고, 있어야지 볼 수 있음.
 #+BEGIN_SRC bash :exports results
   docker
 #+END_SRC
* 컨테이너 관리
** 컨테이너 생성
- CentOS 이미지를 이용하여 도커 컨테이너 생성
  - =-it= 옵션은 컨테이너의 터미널(TTY)와 입력장치(STDIN)를 연결(attach)하면서 실행
  - =--name= 옵션은 컨테이너 이름을 특정 이름으로 지정 
    - 이름이 지정되어 있으면 해당 컨테이너를 관리할 때, 지정한 이름으로 관리 할 수 있음.
    - 이름이 없으면, 무작위로 이름이 만들어지며, 해당 컨테이너를 관리할 때, 무작위 이름 또는 컨테이너 해시의 앞에 3-4자리 정도를 이용할 수 있음.

#+BEGIN_SRC bash
docker run --name centos -it centos
#+END_SRC

- 접속된 도커 터미널을 종료하는 방법
  - =Ctrl-p Ctrl-q= 단축키를 통해서 컨테이너는 종료하지 않고 종료 가능
  - =exit= 으로 종료하면, 컨테이너도 종료되며, =docker start centos=로 시작 가능
    - 재시작된 컨테이너에 접속 하는 방법은 다음장 참고

** 컨테이너에 연결
*** DONE 컨테이너 상태 확인                                            :DONE:
    CLOSED: [2021-02-11 Thu 09:36]
    + =docker ps= 를 통해서, 실행되고 있는 컨테이너 조회
    + =docker ps -a= 를 통해서, 생성된 모든 컨테이너 조회
    + =docker ps -a -f name=centos= 를 사용하여, 컨테이너 이름이 =centos= 인 정보만 조회
      + =filter= 에 대한 상세한 설명은 [[https://docs.docker.com/engine/reference/commandline/ps/#filtering][도커 필터 설명]]에서 확인 가능
      + =docker ps -a | grep centos= 도 비슷한 결과를 얻을 수 있음.
    + =docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"= 를 사용하여, 최소의 정보만 출력 가능
      + =format= 에 들어가는 상세한 내용은 [[https://docs.docker.com/engine/reference/commandline/ps/#formatting][도커 포맷 설명]]에서 확인 가능

*** 컨테이너에 접속
 - =exec= 하위 명령어를 이용하여 컨테이너에 접속할 수 있음.
   - =-it= 옵션을 반드시 붙여야하며, 실행되고 있는 컨테이너에 접속하는 것이 아니라, 명령어를 수행하는 =bash= 명령어를 수행하는 것임.
    
 #+BEGIN_SRC bash
 docker exec -it centos bash
 #+END_SRC
  
 - =attach= 를 통해서 실행되고 있는 컨테이너에 접속할 수 있음.
   - =Ctrl-p Ctrl-q= 단축키로 종료
    
** DONE 도커 허브(Docker hub)
   CLOSED: [2021-02-09 Tue 23:19]
*** 도커 허브란?
    + 도커 이미지 검색 포털
      + =search= 하위 명령어를 통해서 이미지 검색 가능
        + 검색된 이미지로 컨테이너 생성이 가능함
        
#+begin_src bash :exports both 
  docker search ubuntu
  #+end_src

  #+RESULTS:
  | NAME                           | DESCRIPTION                                   | STARS | OFFICIAL | AUTOMATED |
  | ubuntu                         | Ubuntu is a Debian-based Linux operating sys… | 11806 | [OK]     |           |
  | dorowu/ubuntu-desktop-lxde-vnc | Docker image to provide HTML5 VNC interface   | …     | 497      | [OK]      |
  
*** 도커 허브 포탈 사용
    + [[https://hub.docker.com/][도커 허브]]
      + 도커 허브는 웹 UI 를 기반으로 이미지 검색이 가능
        + 검색된 이미지 정보에서 =tags= 탭을 통해서 해당 이미지의 태그를 확인 가능
      
      #+DOWNLOADED: screenshot @ 2021-02-09 23:13:27
      [[file:images/도커_컨테이너_생성/2021-02-09_23-13-27_screenshot.png]]
*** 도커 이미지 및 태그 사용
    + 도커 허브에서 이미지 검색
      + =tags= 탭에서 이미지의 태그 검색
      + 도커 컨테이너 생성할 때, ={image repository}:{tag}= 형태로 이미지를 기술하여 사용 가능
        + 아래의 명령어는 우분투 =20.04= 태그 버전을 실행하는 방법임.

#+begin_src bash
  docker run -it --name ubuntu ubuntu:20.04 
#+end_src
 
* DB 컨테이너 관리
  :PROPERTIES:
  :EXPORT_FILE_NAME: manage-db
  :EXPORT_DATE: <2021-02-11 Thu> 
  :EXPORT_HUGO_MENU: :menu infra :parent docker :identifier "infra-docker-manage-db"
  :EXPORT_HUGO_SECTION: infra/docker
  :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :toc true :comments true :lead "manage database servers by docker"
  :EXPORT_HUGO_DRAFT: false
  :EXPORT_DESCRIPTION: This page describes how to manage a database as a docker container.
  :END:

** MongoDB 컨테이너 생성
   + =docker= 실행 명령어
| Flags     | Description                                      |
|-----------+--------------------------------------------------|
| -d        | 컨테이너 터미널을 획득하지 않고, 디먼모드로 수행 |
| -p        | 컨테이너 PORT를 호스트(Host)로 바인딩            |
| -v        | 호스트의 파일 또는 디렉토리를 컨테이너로 마운트  |
| --name    | 컨테이너 이름                                    |
| --restart | 재시작 정책 (=always= 는 종료시 자동 재시작)     |


#+BEGIN_SRC bash
  docker run -d -p 27017:27017 \
         --restart always \
         -v /Users/hackartist/data/docker/mongo/data:/data/db \
         --name mongo mongo
#+END_SRC

** MongoDB 관리
   + Robo 3T 와 같은 MongoDB 관리 GUI 툴 사용 가능

#+caption:robo3t
[[file:images/2021-01-26_23-04-57_screenshot.png]]
** DB 생성 및 데이터 입력
   + =mongodb= 에 접속해서 아래와 같이 샘플 데이터 생성

#+BEGIN_SRC mongo :db emacs
use emacs
db.users.insert([
    {
        _id : ObjectId("507f191e810c19729de860ea"),
        title: "test",
        description: "test",
        tags: ['mongodb', 'database', 'NoSQL'],
        likes: 100
    },
    {
        title: "test2",
        description: "description2",
        tags: ['mongodb', 'database', 'NoSQL'],
        likes: 100
    },

])
#+END_SRC

#+RESULTS:
#+begin_example
switched to db emacs
BulkWriteResult({
	"writeErrors" : [ ],
	"writeConcernErrors" : [ ],
	"nInserted" : 2,
	"nUpserted" : 0,
	"nMatched" : 0,
	"nModified" : 0,
	"nRemoved" : 0,
	"upserted" : [ ]
})
#+end_example

** 데이터 조회
   + 아래의 커맨드를 통해서 데이터 조회
     
#+BEGIN_SRC mongo :db emacs 
  db.users.find()
#+END_SRC

#+results:
: { "_id" : ObjectId("507f191e810c19729de860ea"), "title" : "test", "description" : "test", "tags" : [ "mongodb", "database", "NoSQL" ], "likes" : 100 }
: { "_id" : ObjectId("601dd9fb4cbad7906637ae42"), "title" : "test2", "description" : "description2", "tags" : [ "mongodb", "database", "NoSQL" ], "likes" : 100 }

* 도커 이미지 생성                                                     :DONE:
  :PROPERTIES:
  :EXPORT_FILE_NAME: manage-image
  :EXPORT_DATE: <2021-02-11 Thu> 
  :EXPORT_HUGO_MENU: :menu infra :parent docker :identifier "infra-docker-manage-image"
  :EXPORT_HUGO_SECTION: infra/docker
  :EXPORT_HUGO_TAGS: infra docker image
  :EXPORT_HUGO_CATEGORIES: infra docker image
  :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :toc true :comments true :lead "manage docker images"
  :EXPORT_HUGO_DRAFT: false
  :EXPORT_HUGO_WEIGHT: auto
  :EXPORT_HUGO_IMAGES: /Volumes/data/devel/github.com/hackartists/notes/images/docker-life-cycle.png 
  :EXPORT_DESCRIPTION: This page explains how to manage docker images.
  :END:
** DONE 도커 이미지 관리                                               :DONE:
   CLOSED: [2021-02-10 Wed 07:12]
*** 도커 이미지란?
    + 컨테이너를 만들기 위한 템플릿
*** 도커 이미지 조회
    + =docker images= 로 조회
      + 레포지토리는 이미지들의 저장소를 의미함.
        + 통용적으로는 레포지토리의 마지막 =/= 뒤를 따서 이미지의 이름으로 부름.
      + 이미지는 단일 템플릿을 대상으로 하여, 해시 형태로 표현됨.

   #+begin_src bash :exports both
     docker images
#+end_src

#+RESULTS:
| REPOSITORY |    TAG | IMAGE        | ID | CREATED     | SIZE   |
| ubuntu     | latest | adafef2e596e |  7 | months  ago | 73.9MB |
| ubuntu     |  18.04 | d27b9ffc5667 |  7 | months  ago | 64.2MB |
| mongo      |  4.2.3 | bcef5fd2979d | 11 | months  ago | 386MB  |

*** 도커 이미지 정리
    + 사용하지 않는 이미지 정리
      + 현재 컨테이너로 만들어져 있지 않은 모든 이미지 삭제
#+begin_src bash
  docker image prune -f
#+end_src

    + 사용하지 않는 볼륨 정리
      + 컨테이너에 마운팅 되지 않은 볼륨 삭제
#+begin_src bash :results raw
  docker volume prune -f
#+end_src

+ 유사한 형태로 사용자하지 않는 =container= 등도 삭제 할 수 있음.
  
** DONE 도커 이미지 수정                                               :DONE:
   CLOSED: [2021-02-14 Sun 22:46]
   + 도커 이미지의 라이프 사이클
     1. 도커 이미지에서 컨테이너 생성
     2. 컨테이너 수정 작업 수행
     3. 컨테이너 작업 내용을 이미지에 커밋(commit)
     4. 이미지를 저장소(repository)에 업로드(push)

#+begin_src plantuml :file images/docker-life-cycle.png :exports results 
  skinparam backgroundColor transparent

  state "도커 저장소" as r
  state "도커 이미지" as i
  state "도커 컨테이너" as c {
        state "컨테이너" as old
        state "수정된 컨테이너" as new

        old -> new: 3. 수정 작업
  }

  r -> i: 1. pull
  i -down-> c: 2. run
  c -> i: 4. commit
  i -> r: 5. push
#+end_src

#+RESULTS:
[[file:images/docker-life-cycle.png]]

*** 나만의 도커 이미지 만들기

**** 베이스 컨테이너 생성
     + =archlinux= 를 이용하여 컨테이너 생성
#+begin_src bash
  docker run -it --name archlinux archlinux
#+end_src

**** 컨테이너 내용 수정
     + 컨테이너에 파일 생성
#+begin_src bash
  echo "new file" >> /root/readme.md
  exit
#+end_src

**** 컨테이너 커밋 및 이미지 생성
     + =commit= 하위명령어를 이용하여 이미지 생성
       + =docker commit -m "{{message}}" {{container-name}} {{image-repository}}:{{tag-name}}=
         
#+begin_src bash
  docker commit -m "my own image" archlinux hackartist/my-own-image:latest
#+end_src

     + =images= 하위명령어를 이용하여 이미지 목록 확인
#+begin_src bash :exports both
  docker images 
#+end_src

#+RESULTS:
| REPOSITORY              | TAG    | IMAGE        | ID | CREATED      | SIZE  |
| hackartist/my-own-image | latest | 3b7256abb727 |  8 | minutes  ago | 406MB |
| hackartist/docker-dns   | latest | a006dfefbbbf |  7 | months   ago | 422MB |
   
     + =run= 하위명령어를 통해서 컨테이너 생성 후 확인
#+begin_src bash
  docker run -it --name myarch hackartist/my-own-image:latest
  cat /root/readme.md
#+end_src

** DONE 도커 이미지 빌드                                               :DONE:
   CLOSED: [2021-02-14 Sun 23:59]
   + [[컨테이너 커밋 및 이미지 생성]]와 유사하지만, 소스코드의 빌드와 이미지 생성 가능
     + [[https://github.com/hackartists/dockerize][Dockerize github]]에서 코드 확인
       1. 코드 개발
       2. =Dockerfile= 스크립트 작성
       3. =docker build= 를 이용하여 이미지 빌드

*** 간단한 예제 코드 개발
    + =go= 개발 언어로 헬로우 월드를 개발
      + 상세 내용은 개발 섹션을 참고
      + 파일 이름은 =main.go= 로 지정
#+begin_src go
  package main

  import "fmt"

  func main() {
    fmt.Println("hello world")
  }
#+end_src

**** 예제 코드 실행
     + =go mod init {{package name}}= 은 의존성 관리 및 =GOPATH= 가 아닌 곳에서 빌드를 위한 프로젝트 관리
     + =go build= 를 통해서 해당 프로그램을 빌드
       + =-o= 옵션으로 실행 파일 이름 지정
#+begin_src bash
  go mod init github.com/hackartists/dockerize
  go build -o app
  ./app
#+end_src

*** Dockerfile 활용
    + =docker build= 를 통해서 이미지 생성
      + =-f= 옵션으로 =Dockerfile= 이름 설정
        + =./Dockerfile= 은 기본 설정이라서 생략 가능
      + =-t= 옵션으로 레포지토리 및 태그 이름을 지정
      + =.= 은 도커 컨텍스트 디렉토리를 의미
        + 지정된 디렉토리 이하로 모든 파일을 도커 빌드를 위해서 로딩함.
        + =.dockerignore= 를 통해서 불필요한 디렉토리를 제외할 수 있음.
#+begin_src bash
  docker build -f Dockerfile -t hackartist/go-hello-world .
#+end_src

**** Dockerfile 스크립트
     + 빌드를 위한 최초 이미지 선택
       + 위의 예제는 =go= 언어를 사용하기 때문에 =golang:latest= 이미지를 활용
     + 빌드 커맨드 수행
       + =go build -o app= 으로 빌드 가능

#+begin_src dockerfile
  FROM golang:latest

  ADD . /workdir

  WORKDIR /workdir
  RUN go build -o app

  CMD ["/workdir/app"]
#+end_src

**** 도커 업로드(push) 하기
     + 생성한 도커 이미지를 해당 레포지토리에 업로드
       + 도메인 이름이 없는 경우 자동으로 =docker.io= 가 추가됨.

#+begin_src bash
  docker push hackartist/go-hello-world
#+end_src

* DONE 도커 빌드 고급 사용법                                           :DONE:
 
** =Dockerignore= 활용 
   + =docker build= 수행시 모든 하위 디렉토리를 컨텍스트로 로딩
     + =build= 디렉토리 등이 포함될 때는 컨테스트 로딩에 시간이 길어짐.
     + 특정 디렉토리를 컨텍스트에서 제외할 필요가 있음.
   + =.dockerignore= 파일을 생성하여 디렉토리 필터링 수행
     + 기본적으로 디렉토리 이름이 들어가지만 몇가지 유용한 문법을 지원
     + =build= 디렉토리 제외
     + =*/temp*= 1 레벨 하위 디렉토리에서 =temp= 로 시작하는 디렉토리 제외
     + =*/*/temp*= 2 레벨 하위 디렉토리에서 =temp= 로 시작하는 디렉토리 제외
     + =temp?= 는 =temp= 로 시작하고 다음에 한글자가 더 있는 디렉토리 제외
       + 예) =tempa= , =tempb= 등

#+begin_src text
  # comment
  build
  */temp*
  */*/temp*
  temp?
#+end_src

** 도커 빌드 이미지 분리 
   + [[Dockerfile 스크립트]] 에서 코드를 빌드하여 이미지를 만드는 방법을 설명
     + 빌드시에는 서비스 운영에 필요하지 않은 파일도 존재
     + 운영 환경의 최적화를 위해서 빌드이미지와 배포이미지 분리
   + 아래와 같이 =as build= 형태로 빌드 환경에 이름을 붙임
     + 동일한 원리로 다양한 이미지 환경을 하나의 =Dockerfile= 에 정의할 수 있음.
   + 배포 이미지에서는 =--from={{name}}= 을 통해서 특정 이름의 이미지에서 파일 복사 등을 수행
     + =golang:latest= 이미지는 =debian:buster= 를 기반으로 하고 있어서, 동일한 환경으로 배포 이미지 선택
     + 동일한 원리로 위에서 여러개의 이미지를 정의했다면 각각의 환경에서 복사할 수 있음

#+begin_src dockerfile
  FROM golang:latest as build

  ADD . /workdir

  WORKDIR /workdir
  RUN go build -o app

  FROM debian/buster
  WORKDIR /app
  COPY --from=build /workdir/app /app/app

  CMD ["/app/app"]
#+end_src

  
* DONE 다중 컨테이너 관리                                              :DONE:

** 도커 컴포즈(Docker compose) 소개
   + 도커 컴포즈는 여러 개의 도커로 구성되는 네트워크를 하나의 파일로 관리
     + 네트워크를 정의
     + 다수의 컨테이너를 정의
     + 각 컨테이너는 이미지, 환경 변수, 포트 정보 등을 정의
#+begin_src plantuml :file images/docker-compose-prosess.png :exports results
  @startwbs
  skinparam backgroundcolor transparent

  ,* 도커기반 프로젝트 설정
  ,** 도커네트워크 설정
  ,*** 네트워크 정보 설정
  ,*** 도커 네트워크 생성
  ,** 도커 컨테이너 설정
  ,*** 이미지 수집
  ,*** 컨테이너별 정보 설정
  ,**** 컨테이너별 이미지 설정 
  ,**** 컨테이너별 환경 변수 설정
  ,**** 컨테이너별 포트 설정
  ,**** 컨테이너별 마운트 정보 설정
  ,** 도커 컴포즈 설정

  @endwbs
#+end_src

#+RESULTS:
[[file:images/docker-compose-prosess.png]]
  
** 도커네트워크 설정
*** 네트워크 정보 설정
    + 각자 사용하고자 하는 도커 개발 네트워크의 이름 설정
      + 본 블로그에서는 =dev-net= 이라고 설정
    + =devnet= 의 IP 대역을 =192.168.100.0/24= 로 설정
      + 즉, 해당 네트워크에 포함되는 모든 도커 컨테이너는 =192.168.100.x= 의 IP를 가진다는 것을 의미함.
      + 위의 IP 표기를 CIDR 표기라고 하는데, 이는 추후에 네트워크에서 다룰 예정임.

*** 도커 네트워크 생성
    + [[네트워크 정보 설정]] 에서 기술한 정보를 이용하여 도커 네트워크를 생성
      + 도커 컴포즈에서 자동으로 생성하는 방법도 있으나, 수동 생성하는 것으로 사용하는 것에 대해서만 설명
      + =Mac OS= 를 기준으로 자동 생성보다, 수동 생성을 추천하며, 도커 virtual private network(VPN) 활용편에서 설명
#+begin_src bash
  docker network create --attachable --subnet 192.168.100.0/24 devnet 
#+end_src

#+RESULTS:
: 77284d8095023ff7413410966f9f9565c0628ff76f095818d48f6f16bc08ae35

** 도커 컨테이너 설정
   + 이 단계에서는 필요한 컨테이너들에 대한 정보를 설정

*** 이미지 수집
    + 사용하고자 하는 이미지를 선택
| 사용용도          | 이미지      |
|-------------------+-------------|
| 데이터베이스      | mongo:4     |
| 애플리케이션 서버 | golang:1.15 |

*** 컨테이너별 정보 설정
**** 컨테이너별 이미지 설정 
     + 각 컨테이너에 대한 이름 및 이미지 설정
| 용도         | 컨테이너 이름   |
|--------------+-----------------|
| 데이터베이스 | mongodb         |
| 개발 서버    | greeting-server |

**** 컨테이너별 환경 변수 설정
     + 각 컨테이너별로 환경변수 설정이 필요한 경우가 있음.
       + 각 컨테이너별로 어떤 환경변수를 설정할지 결정
| 컨테이너 이름 | 환경변수                   | 값   |
|---------------+----------------------------+------|
| mongodb       | MONGO_INITDB_ROOT_USERNAME | root |
| mongodb       | MONGO_INITDB_ROOT_PASSWORD | root |

**** 컨테이너별 포트 설정
     + 호스트 머신의 특정 포트를 컨테이너의 포트에 바인딩하기 위해서 사용
     + 호스트에서 게스트 머신으로 접근하기 위해서는 2가지 방법이 있음.
       1. 컨테이너의 IP로 접근 하는 방법
          + =Mac OS= 에서는 기본적으로 안됨.
       2. 호스트 머신의 포트로 매핑하여 접근하는 방법
          + =localhost= 에 바인딩된 포트를 통해서 접근
| 컨테이너 이름   | 호스트 포트 | 컨테이너 포트 |
|-----------------+-------------+---------------|
| mongodb         |       27017 |         27017 |
| greeting-server |        3000 |          3000 |

**** 컨테이너별 마운트 정보 설정 
     + 호스트의 특정 경로를 컨테이너에 마운트할 때 사용
       + =PROJECT_ROOT= 는 =/home/hackartist/data/greeting-server= 로 가정함
| 컨테이너 이름   | 호스트 경로               | 컨테이너 경로 |
|-----------------+---------------------------+---------------|
| mongodb         | $PROJECT_ROOT/.build/data | /data/db      |
| greeting-server | $PROJECT_ROOT             | /workdir      |

     
** 도커 컴포즈 설정
*** docker-compose.yaml 파일 작성 
    + [[도커 컨테이너 설정]] 에서 설정한 정보를 기반으로 도커 컴포즈를 구성
      + =networks= 옵션으로 외부에서 생성한 네트워크를 사용하여 생성되도록 설정
        + 해당 네트워크의 IP 주소를 가지게 됨
      + =services= 섹션에 각 컨테이너에 대한 정보를 기술
        + =services= 섹션은 크게 =mongodb=, =greeting-server= 로 구성
          + 가장 상위의 이름은 도커 컴포즈 네트워크 상에서 각 컨테이너를 위한 도메인 이름으로 사용됨.
        + =restart= 옵션을 통해서 컴퓨터 재시작 시에 자동으로 시작되도록 설정 가능
        + =ports=, =environment=, =volumes= 섹션을 이용하여 위에서 정의된 항목에 대한 설정 수행
        + =working_dir= 은 해당 컨테이너가 시작할 때 경로를 의미
        + =command= 는 해당 컨테이너가 시작할 때, 수행되는 커맨드
          + =go run main.go= 는 =greeting-server= 를 개발용으로 실행하는 커맨드
 
 #+begin_src docker-compose
   version: "3.8"

   networks:
     default:
       external:
         name: devnet

   services:
     mongodb:
       image: mongo:4
       container_name: mongodb
       restart: always
       ports:
         - 27017:27017
       environment:
         - MONGO_INITDB_ROOT_USERNAME: root
         - MONGO_INITDB_ROOT_PASSWORD: root
       volumes:
         - $PROJECT_ROOT/.build/data:/data/db
     greeting-server:
       image: golang:1.15
       container_name: greeting-server
       restart: always
       ports:
         - 3000:3000
       volumes:
         - $PROJECT_ROOT:/workdir
       working_dir: /workdir
       command: go run main.go
 #+end_src
*** 도커 컴포즈 실행
    + [[docker-compose.yaml 파일 작성]] 섹션에서 작성된 파일 사용법
      + =PROJECT_ROOT= 는 yaml 파일에서 사용하는 환경 변수 전달
      + =-f= 는 도커 컴포즈 파일 이름을 기술
        + =docker-compose.yaml= 인 경우에는 생략 가능
      + =-p= 는 도커 스택의 이름으로 추후 관리에 용이함.
      + =up= 은 도커 컴포즈를 구성하는 명령어
        + =-d= 옵션은 디먼 모드로 동작하는 옵션, 생략하면 도커 컴포즈 로그를 볼 수 있음.
        + =mongodb= 만 수행하고 싶은 경우는 =... up -d mongodb= 명령어를 사용
      

#+begin_src bash
  PROJECT_ROOT=/home/hackartist/data/greeting-server \
              docker-compose -f docker-compose.yaml -p greeting-server up -d
#+end_src

*** 도커 컴포즈 종료
    + 수행된 도커 컴포즈를 종료하고 싶은 경우에 =down= 을 사용할 수 있음.
      + =--remove-orphans= 는 어떤 사유로 해당 컴포즈 소속이지만, 이전에 종료되지 않은 컨테이너를 모두 종료하는 옵션
#+begin_src bash
  PROJECT_ROOT=/home/hackartist/data/greeting-server \
              docker-compose -f docker-compose.yaml -p greeting-server down --remove-orphans
#+end_src

* DONE 도커 VPN 활용편                                                 :DONE:
 
** 도커 네트워크 개요 및 제약사항
   + 도커 네트워크는 도커들 간의 사설 네트워크가 구축되고, 호스트 머신과 =bridge= 인터페이스를 통해서 통신
     + Mac OS의 도커는 가상 머신(virtual machine) 에서 구동되는 것이기 때문에, =bridge= 가 없음.
     + 따라서, Mac OS 에서는 호스트 머신과 도커 컨테이너들이 직접적으로 통신할 수 없음.
       + 상세한 내용은 [[https://docs.docker.com/docker-for-mac/networking/][도커 네트워크]]를 참고

   + Mac OS 에서 호스트 머신이 컨테이너에 접근하기 위해서, =-p= 옵션을 통해 포트 바인딩이 필요함.
     + 많은 포트가 바인딩되는 경우 이에 대한 관리가 어려움

** VPN을 이용한 호스트 머신과 도커 네트워크 터널링
   + 호스트 머신을 도커 네트워크에 virtual private network(VPN)으로 연결하여 라우팅 수행
     + VPN 의 개념은 네트워크 섹션을 참고
     + VPN 터널링을 통해서 [[도커 네트워크 생성]] 에서 생성된 주소는 해당 VPN 으로 라우팅되도록 설정
   + VPN 터널링 및 라우팅 설정이 된 이후에는 도커 컨테이너에 접속할 때 별도 포트바인딩이 필요없음.
     
    
** VPN 터널링 및 라우팅 설정 절차 
   + 본 섹션에서는 Open VPN 을 통해서 설정하는 방법에 대해서 설명
#+begin_src plantuml :file images/vpn-wbs.png :exports results
  @startwbs
  skinparam backgroundcolor transparent

  ,* OpenVPN 네트워크 구축
  ,** Open VPN 설정

  ,*** Open VPN 사전 설정

  ,*** Open VPN 컨테이너 설정 

  ,*** Open VPN 컨테이너 실행

  ,** OVPN 인증서 설정

  ,*** OVPN 인증서 발급

  ,*** 인증서 수정

  ,**** 라우팅 정보 수정

  @endwbs
#+end_src

#+RESULTS:
[[file:images/vpn-wbs.png]]

** Open VPN 설정
   + Open VPN 을 설정하기 위해서 [[https://hub.docker.com/r/kylemanna/openvpn][kylemanna/openvpn]] 이미지를 사용

*** Open VPN 사전 설정
    + 사전 설정 단계에서는 컨테이너가 구동되기 전에 필요한 설정 작업을 미리 수행
      + Open VPN 으로 발급된 인증서에 기술할 도메인 이름 등을 설정

**** 도커 볼륨 생성
     + 도커 볼륨 크게 두가지 방법을 사용할 수 있음.
       + =docker volume= 으로 생성하는 실제 도커의 볼륨
       + =호스트 경로= 를 도커 볼륨으로 사용
#+begin_src bash
  ## 도커 볼륨 사용시
  export OVPN_DATA=ovpn-data
  docker volume create --name $OVPN_DATA

  ## 호스트 경로 사용시
  export OVPN_DATA=$(pwd)/openvpn # 호스트 머신에서 설정파일을 저장하고자 하는 경로
#+end_src

**** PKI 구조 초기화
     + PKI 구조는 인증서를 발급/검증하기 위한 구조로 Open VPN 에서 인증서 발급 구조로 사용
       + 상세 설명은 네트워크 섹션 참고
     + PKI 구조를 만들기 위해서 아래와 같은 절차를 거침.
       1. PKI 구조를 위한 설정 파일 생성
       2. PKI 구조 생성
     + 아래의 명령어를 수행하기 전에 [[도커 볼륨 생성]]은 이미 완료되어야 함.
#+begin_src bash
  docker run -v $OVPN_DATA:/etc/openvpn --rm kylemanna/openvpn:2.4 ovpn_genconfig -u udp://localhost
  docker run -v $OVPN_DATA:/etc/openvpn --rm -it kylemanna/openvpn:2.4 ovpn_initpki
#+end_src

*** Open VPN 컨테이너 설정 
    + 아래와 같이 도커 컴포즈 설정 파일을 작성
      + [[도커 네트워크 생성]]에서 생성된 네트워크를 사용
        + 해당 네트워크를 사용해야지 개발용 도커와 연계할 수 있음.
      + 호스트 경로가 아닌 도커 볼륨을 사용하는 경우에는 코멘트 삭제
          
#+begin_src docker-compose
  version: "3.9"

  networks:
    default:
      external:
        name: devnet

  services:
    vpn.docker:
      restart: always
      container_name: vpn.docker
      image: kylemanna/openvpn:2.4
      ports:
         - 1194:1194/udp
      volumes:
        - $OVPN_DATA:/etc/openvpn
      cap_add:
        - NET_ADMIN

  # volumes:
  #   ovpn-data:
  #     external: true
#+end_src
    
*** Open VPN 컨테이너 실행
    + [[Open VPN 컨테이너 설정]] 에서 작성된 도커 컴포즈를 실행
      + Open VPN 도커를 실행하기 전에 [[PKI 구조 초기화]]가 선행 되어야 함.
#+begin_src bash
  docker-compose -p infra up -d
#+end_src


** OVPN 인증서 설정
  
*** OVPN 인증서 발급
    + VPN에 접속할 때, 사용할 인증서 발급
      + 두번째 단계에서 [[PKI 구조 초기화]] 단계에서 입력한 비밀번호 입력 필요
    + 인증서 발급이 완료되고 나면 =$NAME.ovpn= 파일이 생성됨.
#+begin_src bash
  export NAME=hackartist
  docker run -v $OVPN_DATA:/etc/openvpn --rm -it kylemanna/openvpn easyrsa build-client-full $NAME nopass
  docker run -v $OVPN_DATA:/etc/openvpn --rm kylemanna/openvpn ovpn_getclient $NAME > $NAME.ovpn
#+end_src

    
*** 인증서 수정
    + 생성된 인증서를 텍스트 에디터로 열기
      + 아래와 같은 형태의 인증서가 나온것을 확인할 수 있음.
     
#+begin_src text
  client
  nobind
  dev tun
  remote-cert-tls server

  remote localhost 1194 udp

  <key>
  -----BEGIN PRIVATE KEY-----
  ... 생략 ...
  -----END PRIVATE KEY-----
  </key>
  <cert>
  -----BEGIN CERTIFICATE-----
  ... 생략 ...
  -----END CERTIFICATE-----
  </cert>
  <ca>
  -----BEGIN CERTIFICATE-----
  ... 생략 ...
  -----END CERTIFICATE-----
  </ca>
  key-direction 1
  <tls-auth>
  #
  # 2048 bit OpenVPN static key
  #
  -----BEGIN OpenVPN Static key V1-----
  ... 생략 ...
  -----END OpenVPN Static key V1-----
  </tls-auth>

  redirect-gateway def1

#+end_src

**** Open VPN 연결
     + Mac OS 에서는 =tunnel blick= 을 사용
       + 설치를 위해서는 아래의 스크립트 실행
#+begin_src bash
  brew cask install tunnelblick
#+end_src

**** 라우팅 정보 확인
     + =netstat= 을 이용하여 라우팅 정보 확인
       + =tun= 인터페이스와 일부 라우터가 추가된 것을 확인
#+begin_src bash :exports both
  netstat -nr
#+end_src

#+RESULTS:
|    Destination |       Gateway |         Genmask | Flags | MSS | Window | irtt | Iface           |
|      128.0.0.0 | 192.168.255.5 |       128.0.0.0 | UG    |   0 |      0 |    0 | tun0            |
|  192.168.255.1 | 192.168.255.5 | 255.255.255.255 | UGH   |   0 |      0 |    0 | tun0            |
|  192.168.255.5 |       0.0.0.0 | 255.255.255.255 | UH    |   0 |      0 |    0 | tun0            |

**** 라우팅 정보 수정    
     + [[도커 네트워크 생성]]에서 =192.168.100.0/24= 로 네트워크를 생성하였고, 해당 트래픽을 =tun0= 인터페이스로 라우팅을 수행
       + 라우팅 테이블을 수정하는 작업인데, 간단하게는 =route= 명령어를 통해서 수행할 수 있음.
       + 본 섹션에서는 =ovpn= 파일을 수정하는 방법에 대해서 설명
#+begin_src text
  client
  nobind
  dev tun
  remote-cert-tls server

  remote localhost 1194 udp

  <key>
  -----BEGIN PRIVATE KEY-----
  ... 생략 ...
  -----END PRIVATE KEY-----
  </key>
  <cert>
  -----BEGIN CERTIFICATE-----
  ... 생략 ...
  -----END CERTIFICATE-----
  </cert>
  <ca>
  -----BEGIN CERTIFICATE-----
  ... 생략 ...
  -----END CERTIFICATE-----
  </ca>
  key-direction 1
  <tls-auth>
  #
  # 2048 bit OpenVPN static key
  #
  -----BEGIN OpenVPN Static key V1-----
  ... 생략 ...
  -----END OpenVPN Static key V1-----
  </tls-auth>

  route 192.168.100.0 255.255.255.0
#+end_src

***** 라우팅 테이블 확인
      + 해당 대역에 대한 라우팅 정보가 추가된 것을 확인
      
       #+begin_src bash :exports results
         netstat -nr
#+end_src

#+RESULTS:
|    Destination |       Gateway |         Genmask | Flags | MSS | Window | irtt | Iface           |
|  192.168.100.0 | 192.168.255.5 |   255.255.255.0 | UG    |   0 |      0 |    0 | tun0            |
|  192.168.255.1 | 192.168.255.5 | 255.255.255.255 | UGH   |   0 |      0 |    0 | tun0            |
|  192.168.255.5 |       0.0.0.0 | 255.255.255.255 | UH    |   0 |      0 |    0 | tun0            |

  
* DONE 도커 DNS 활용편                                                 :DONE:
** 목표
   + 도커 컨테이너들 간에는 네트워크 alias 로 통신이 가능하지만, 호스트 머신에서는 컨테이너와 통신하기가 어려움.
     + 매번 변하는 도커들의 IP 를 조회해서 관리하기가 어려움.
     + 고정 IP로 지정할 수도 있으나, 이런 경우 해당 네트워크의 모든 컨테이너의 IP 를 관리해야 함.

** 동작 원리
   + 도커 이름을 풀이해 줄 수 있는 DNS 서버를 개발
     + 해당 서버의 동작은 아래와 같음.

#+begin_src plantuml :file images/docker-dns.png :exports results
  skinparam backgroundcolor transparent

  (*) --> "도커 컨테이너 이름 검색"

  if "컨테이너 검색 여부" then
     --> [존재하는 경우] "컨테이너 IP 검색"
     --> [IP 주소] "A 레코드 생성"
     --> [A 레코드] (*)
  else
    --> [존재하지 않는 경우] "Fallback DNS 서버에 요청"
    --> [A 레코드] (*)
  endif
#+end_src

#+RESULTS:
[[file:images/docker-dns.png]]

** 사전 준비 사항
   + 본 섹션은 호스트 머신과 도커 컨테이너가 직접적인 통신이 가능해야 함.
     + Mac OS는 [[도커 VPN 활용편]]을 통해서 직접적인 통신이 가능한 상태여야 함.

** 도커 DNS 구축
*** 도커 DNS 설정 
    + =hackartist/docker-dns= 이미지를 사용
      + 도커 및 쿠버네티스(Kubernetes) DNS 기능 제공
        + =cluster.local.= 쿠버네티스 검색도메인 제공
    + =docker-compose= 에 아래의 컨테이너 정보 추가
      + =/var/run/docker.sock= 은 해당 DNS 는 도커 명령어 인터페이스(CLI) 를 통해서 컨테이너 이름을 IP 주소로 변환
      + 이 과정에서 도커 디먼과 통신을 해야하기 때문에 해당 주소를 마운트 해야함.

 #+begin_src docker-compose
     dns:
       restart: always
       container_name: dns
       image: hackartist/docker-dns:latest
       volumes:
         - /var/run/docker.sock:/var/run/docker.sock
       ports:
         - 53:53/udp
       environment:
         - ENABLE_K8S_DNS_LOOKUP=false
         - FALLBACK_DNS=8.8.8.8
 #+end_src

*** DNS 주소 변경
    + 호스트 머신의 DNS 주소를 =127.0.0.1= 로 변경
      + 구축한 도커 DNS 를 기본 DNS로 사용하도록 설정
      + =/etc/resolv.conf= 의 내용 또는 네트워크 설정에서 변경할 수 있음.
#+begin_src conf
  nameserver 127.0.0.1
  nameserver 10.96.0.10
  nameserver 8.8.8.8
#+end_src

*** DNS 서버 테스트
    + =nslookup= 을 통해서 테스트할 수 있음.
      + 서버가 =127.0.0.1= 로 나오면 정상 변경이 적용
        + 변경이 되지 않은 경우에는 네트워크를 비활성화 후에 다시 활성화하여 확인
      + 서버가 =127.0.0.1= 로 정상적으로 변경되었는데, 검색이 안되면 아래의 내용 확인
        + [[도커 DNS 설정]]에서 이름을 =container_name= 을 =dns= 로 했는지 확인
        + [[도커 DNS 설정]]에서 볼륨 마운트를 정상적으로 했는지 확인

#+begin_src bash :exports results :results code
  nslookup dns
#+end_src

#+RESULTS:
#+begin_src bash
Server:		127.0.0.1
Address:	127.0.0.1#53

Name:	dns
Address: 172.51.0.3

#+end_src


